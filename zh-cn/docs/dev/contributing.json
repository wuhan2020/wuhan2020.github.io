{
  "filename": "contributing.md",
  "__html": "<!-- TOC -->\n<h1>WE PROVIDE ENGLISH VERSION, PLEASE CLICK <a href=\"./contributing.md\">HERE</a></h1>\n<ul>\n<li><a href=\"#%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97\">贡献指南</a>\n<ul>\n<li><a href=\"#%E6%88%91%E8%A6%81%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF\">我要提交数据信息</a></li>\n<li><a href=\"#%E6%88%91%E8%A6%81%E6%8F%90-issue%E6%8F%90-pr\">我要提 ISSUE，提 PR</a>\n<ul>\n<li><a href=\"#0%E6%8F%90%E4%BA%A4-issue\">0、提交 issue</a></li>\n<li><a href=\"#1%E8%AE%A4%E9%A2%86%E4%BB%BB%E5%8A%A1\">1、认领任务</a></li>\n<li><a href=\"#2fork-%E6%9C%AC%E4%BB%93%E5%BA%93\">2、Fork 本仓库</a></li>\n<li><a href=\"#3clone-%E4%BB%93%E5%BA%93\">3、Clone 仓库</a></li>\n<li><a href=\"#4%E6%96%B0%E5%BB%BA-branch\">4、新建 <code>branch</code></a></li>\n<li><a href=\"#5%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%E5%B9%B6%E6%8F%90%E4%BA%A4\">5、修改内容，并提交</a></li>\n<li><a href=\"#6%E5%90%8C%E6%AD%A5%E4%B8%8A%E6%B8%B8%E4%BB%93%E5%BA%93%E5%8F%98%E6%9B%B4\">6、同步上游仓库变更</a></li>\n<li><a href=\"#7%E6%8E%A8%E9%80%81%E6%96%B0%E5%88%86%E6%94%AF%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">7、推送新分支到自己的远程仓库</a></li>\n<li><a href=\"#8%E6%8F%90-pull-request\">8、提 <code>Pull Request</code></a></li>\n<li><a href=\"#9%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%E6%97%B6%E5%87%BA%E7%8E%B0%E5%86%B2%E7%AA%81%E6%97%B6%E4%BD%A0%E5%8F%AF%E4%BB%A5\">9、如果你的代码合并时出现冲突时，你可以：</a></li>\n<li><a href=\"#10%E5%BD%93%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A2%AB%E5%90%88%E5%B9%B6%E8%BF%9B%E5%8E%BB%E4%BB%A5%E5%90%8E%E4%BD%A0%E5%8F%AF%E4%BB%A5\">10、当你的代码被合并进去以后，你可以：</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A1%B9%E7%9B%AE%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%AF%B4%E6%98%8E\">项目机器人说明</a></li>\n<li><a href=\"#slack-%E4%BA%A4%E6%B5%81%E7%BE%A4%E7%BB%84\">Slack 交流群组</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h1>贡献指南</h1>\n<h2>我要提交数据信息</h2>\n<p><strong>该仓库为数据主仓，所有数据由脚本自动提交导入，请不要在该仓库中直接提交数据信息，提交数据信息，请参考 <a href=\"./README.md\">README</a></strong>。</p>\n<blockquote>\n<p>本平台使用石墨文档收集数据信息，并由脚本定时以 PR 形式提交数据到该仓库，请不要在该仓库中直接修改数据文件。</p>\n</blockquote>\n<blockquote>\n<p>由于参与人员较多，不开放所有人员的编辑权限，请在<a href=\"https://shimo.im/forms/YVJkGrGCWwQPTpqY/fill\">这里</a>填写申请，会定向邀请到特定表单中进行信息录入。</p>\n</blockquote>\n<h2>我要提 ISSUE，提 PR</h2>\n<p>这篇指南会尽可能清楚地描述 GitHub 操作流程，欢迎提交 issue， 或者直接修改提交 PR，为 <strong>wuhan2020</strong> 贡献一份自己的力量！</p>\n<h3>0、提交 issue</h3>\n<p>有任何想法或问题，欢迎到 <a href=\"https://github.com/wuhan2020/wuhan2020/issues\">这里</a> 提交 <code>issue</code>，参与项目的志愿者将会及时沟通交流。</p>\n<p>在提交 <code>issue</code> 时，请确定 <code>issue</code> 的类型，并在标题中注明，项目的机器人将会自动打上对应的标签：</p>\n<ul>\n<li>hospital: 医院相关信息</li>\n<li>factory: 生产相关信息</li>\n<li>logistical: 物流相关信息</li>\n<li>hotel: 酒店相关信息</li>\n<li>donation：捐款相关信息</li>\n<li>clinic：义诊相关信息</li>\n<li>news：疫情新闻动态相关信息</li>\n<li>doc: 文档相关</li>\n<li>bug： 缺陷反馈</li>\n<li>feature: 新的特性</li>\n</ul>\n<h3>1、认领任务</h3>\n<blockquote>\n<p><strong>衷心地希望大家能为本项目添砖加瓦，齐心协力，共克时艰！</strong></p>\n</blockquote>\n<p>在 <a href=\"https://github.com/wuhan2020/wuhan2020/issues\">Issue 列表</a> 中挑选任务。然后在该 <code>issue</code> 中使用 <code>/self-assign</code>命令领取任务。项目的机器人将会自动将该<code>issue</code>的<code>Assignees</code>指定为自己。</p>\n<pre><code>/self-assign\n</code></pre>\n<p>示意图如下：</p>\n<p><img src=\"./static/self-assign.png\" alt=\"self-assign 示意图\"></p>\n<h3>2、Fork 本仓库</h3>\n<p>访问 <a href=\"https://github.com/wuhan2020/wuhan2020\">wuhan2020 仓库的主页</a>，并 Fork 到自己的账号下。</p>\n<p><img src=\"./static/fork-repo.png\" alt=\"Fork 仓库\"></p>\n<blockquote>\n<p>注：以下内容是在命令行终端里面操作，需要安装 <a href=\"https://git-scm.com/\">Git</a>.</p>\n</blockquote>\n<h3>3、Clone 仓库</h3>\n<p>回到自己的 GitHub 主页，并找到刚刚 Fork 过来的 <em>wuhan2020</em> 仓库，进入仓库主页, 将该仓库 <code>clone</code> 到本地，如：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># 将下面的 XXX 替换成你自己的用户名</span>\ngit <span class=\"hljs-built_in\">clone</span> git@github.com:XXX/wuhan2020.git\n<span class=\"hljs-built_in\">cd</span> wuhan2020\n</code></pre>\n<h3>4、新建 <code>branch</code></h3>\n<blockquote>\n<p>非紧急修复，不建议在 master 分支进行开发修改。</p>\n</blockquote>\n<p>根据该分支的用途，起一个恰当的分支名称，新建分支，如：</p>\n<pre><code class=\"language-bash\">git checkout -b my-fix-branch master\n</code></pre>\n<h3>5、修改内容，并提交</h3>\n<p>对相应文件做出修改，修改完成后，提交：</p>\n<pre><code class=\"language-bash\">git add .\ngit commit -m <span class=\"hljs-string\">\"hotel: update HOTEL.csv, fix #1\"</span>\n</code></pre>\n<p>提交时，尽量：</p>\n<p>(1) 用一句话清楚的描述这次提交做了什么。</p>\n<p>(2) 关联相关 <code>issue</code>，如 <code>fix #1</code> 、<code>close #2</code>、<code>#3</code></p>\n<p>如果 <code>commit</code> 之后，又做了修改，可以使用 <code>--amend</code> 参数：</p>\n<pre><code class=\"language-bash\">git add .\ngit commit --amend -sm <span class=\"hljs-string\">\"hotel: update HOTEL.csv, fix #1\"</span>\n</code></pre>\n<h3>6、同步上游仓库变更</h3>\n<p>同步上游仓库变更(即 <a href=\"https://github.com/wuhan2020/wuhan2020\">wuhan2020/wuhan2020</a> )，因为可能有其他人先于你提交到上游仓库，防止冲突：</p>\n<pre><code class=\"language-bash\">$ git remote add upstream git@github.com:wuhan2020/wuhan2020.git\n$ git fetch upstream\n</code></pre>\n<p>若上游仓库有变更，需要先进行 <code>rebase</code>:</p>\n<pre><code class=\"language-bash\">$ git rebase upstream/master\n</code></pre>\n<h3>7、推送新分支到自己的远程仓库</h3>\n<pre><code class=\"language-bash\">$ git push -f origin my-fix-branch:my-fix-branch\n</code></pre>\n<h3>8、提 <code>Pull Request</code></h3>\n<p>在自己仓库的页面上提<code>pull request</code> 到上游仓库。如下图所示。</p>\n<p><img src=\"./static/pull-request.png\" alt=\"pull-request\"></p>\n<p><img src=\"./static/open-pr.png\" alt=\"open-pr\">\n如果其他人 <code>review</code> 之后，需要再进行更改，就修改相关内容，然后执行以下操作，该 PR 将会自动同步该 <code>commit</code> 。</p>\n<pre><code class=\"language-bash\">git add .\ngit commit --amend\ngit push -f origin my-fix-branch\n</code></pre>\n<h3>9、如果你的代码合并时出现冲突时，你可以：</h3>\n<blockquote>\n<p>注：如果未出现冲突，则无需进行以下操作</p>\n</blockquote>\n<ul>\n<li>先同步上游仓库变更</li>\n</ul>\n<pre><code class=\"language-bash\">git fetch upstream\n</code></pre>\n<ul>\n<li>进行<code>rebase</code>:</li>\n</ul>\n<pre><code class=\"language-bash\">git rebase upstream/master\n</code></pre>\n<ul>\n<li>手动解决冲突内容，之后重新提交：</li>\n</ul>\n<pre><code class=\"language-bash\">git add my-fix-file\ngit rebase --<span class=\"hljs-built_in\">continue</span>\ngit push -f origin my-fix-branch\n</code></pre>\n<h3>10、当你的代码被合并进去以后，你可以：</h3>\n<ul>\n<li>切回到 <code>master</code> 分支：</li>\n</ul>\n<pre><code class=\"language-bash\">git checkout master -f\n</code></pre>\n<ul>\n<li>保持本地 <code>master</code> 分支与上游分支同步：</li>\n</ul>\n<pre><code class=\"language-bash\">git pull --ff upstream master\n</code></pre>\n<ul>\n<li>删除本地分支(可选):</li>\n</ul>\n<pre><code class=\"language-bash\">git branch -D my-fix-branch\n</code></pre>\n<ul>\n<li>删除远程分支(可选)：</li>\n</ul>\n<pre><code class=\"language-bash\">git push origin --delete my-fix-branch\n</code></pre>\n<h2>项目机器人说明</h2>\n<p>本项目已接入 Github 机器人：<code>Menbotics</code>，该机器人可以：</p>\n<ul>\n<li><strong><code>Issue</code> 自动打标签</strong>：具体见 <a href=\"#0%E6%8F%90%E4%BA%A4-issue\">0、提交 issue</a></li>\n<li><strong>任务认领</strong>：具体见 <a href=\"#1%E8%AE%A4%E9%A2%86%E4%BB%BB%E5%8A%A1\">1、认领任务</a></li>\n<li><strong>代码自动合并</strong>：有 PR(Pull Request) 提交上来之后，有代码合并权限的人员使用 <code>/approve</code> 让机器人自动合入代码。</li>\n</ul>\n<p>机器人配置见 <a href=\"./.github/hypertrons.json\">hypertrons.json</a>，如在该配置文件中可以看到具体有哪些人员有代码合并权限。</p>\n<h2>Slack 交流群组</h2>\n<p>此外，我们已经建立了 <a href=\"https://join.slack.com/t/wuhan2020/shared_invite/enQtOTIzNjA2MDYwOTUxLWVjMjA4MjdhNGVmZmZlZTgxYjM1ZDY1NGVkZDVkNGI0NzhjZGVlYTM2Mjc5Mjk2YjgyYTk1NDJmNTkxODZlOTE\">Slack 交流群组</a>，已建立前端、后端、数据同步等对应 channel，欢迎大家加入共同探讨各类技术或非技术类问题，让我们大家一起齐心协力，众志成城，共克时艰！</p>\n",
  "link": "/zh-cn/docs/dev/contributing.html",
  "meta": {}
}